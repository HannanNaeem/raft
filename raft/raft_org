package raft

//
// this is an outline of the API that raft must expose to
// the service (or tester). see comments below for
// each of these functions for more details.
//
// rf = Make(...)
//   create a new Raft server.
// rf.Start(command interface{}) (index, term, isleader)
//   start agreement on a new log entry
// rf.GetState() (term, isLeader)
//   ask a Raft for its current term, and whether it thinks it is leader
// ApplyMsg
//   each time a new entry is committed to the log, each Raft peer
//   should send an ApplyMsg to the service (or tester)
//   in the same server.
//

import (
	"fmt"
	"labrpc"
	"math/rand"
	"sync"
	"time"
)

// import "bytes"
// import "encoding/gob"

// ApplyMsg explanation
// as each Raft peer becomes aware that successive log entries are
// committed, the peer should send an ApplyMsg to the service (or
// tester) on the same server, via the applyCh passed to Make().
//
type ApplyMsg struct {
	Index       int
	Command     interface{}
	UseSnapshot bool   // ignore for Assignment2; only used in Assignment3
	Snapshot    []byte // ignore for Assignment2; only used in Assignment3
}

// Raft explanation
// A Go object implementing a single Raft peer.
//
type Raft struct {
	mu        sync.Mutex
	peers     []*labrpc.ClientEnd
	persister *Persister
	me        int // index into peers[]

	// Your data here.
	timeoutElection    int
	heartbeatTimer     int
	heartbeatFrequency int
	currTerm           int
	leaderID           int
	votedFor           int
	isCandidate        bool
	appendEntriesChan  chan AppendEntriesArgs
	requestVoteChan    chan RequestVoteReply
	quitChan           chan int
	quitLeaderChan     chan int

	// Look at the paper's Figure 2 for a description of what
	// state a Raft server must maintain.

}

// GetState should
// return currentTerm and whether this server
// believes it is the leader.
func (rf *Raft) GetState() (int, bool) {

	var term int
	var isleader bool
	// Your code here.
	rf.mu.Lock()
	term = rf.currTerm
	isleader = rf.leaderID == rf.me
	rf.mu.Unlock()
	return term, isleader
}

//
// save Raft's persistent state to stable storage,
// where it can later be retrieved after a crash and restart.
// see paper's Figure 2 for a description of what should be persistent.
//
func (rf *Raft) persist() {
	// Your code here.
	// Example:
	// w := new(bytes.Buffer)
	// e := gob.NewEncoder(w)
	// e.Encode(rf.xxx)
	// e.Encode(rf.yyy)
	// data := w.Bytes()
	// rf.persister.SaveRaftState(data)
}

//
// restore previously persisted state.
//
func (rf *Raft) readPersist(data []byte) {
	// Your code here.
	// Example:
	// r := bytes.NewBuffer(data)
	// d := gob.NewDecoder(r)
	// d.Decode(&rf.xxx)
	// d.Decode(&rf.yyy)
}

// RequestVoteArgs should
// example RequestVote RPC arguments structure.
//
type RequestVoteArgs struct {
	// Your data here.
	Term int
	ID   int
}

// RequestVoteReply exmaple
// example RequestVote RPC reply structure.
//
type RequestVoteReply struct {
	// Your data here.
	Term        int
	VoteGranted bool
}

// RequestVote example
// example RequestVote RPC handler.
// This is called whenever a requestVote call is made to a server (implement what I will do when its called on me)
func (rf *Raft) RequestVote(args RequestVoteArgs, reply *RequestVoteReply) {
	// Your code here.

	// Not voting by default
	rf.mu.Lock()

	reply.VoteGranted = false
	reply.Term = args.Term

	// Setting the reply term to be currentTerm if the candidate is outdated
	if args.Term < rf.currTerm {
		reply.Term = rf.currTerm
	}

	// give vote if the server hasnt voted for this term and the requesters term is greater
	if (rf.votedFor == -1 || rf.votedFor == args.ID) && args.Term > rf.currTerm {
		reply.VoteGranted = true
		reply.Term = args.Term
		// keep record for who the server voted for
		rf.votedFor = args.ID
	}
	rf.mu.Unlock()

}

//
// example code to send a RequestVote RPC to a server.
// server is the index of the target server in rf.peers[].
// expects RPC arguments in args.
// fills in *reply with RPC reply, so caller should
// pass &reply.
// the types of the args and reply passed to Call() must be
// the same as the types of the arguments declared in the
// handler function (including whether they are pointers).
//
// returns true if labrpc says the RPC was delivered.
//
// if you're having trouble getting RPC to work, check that you've
// capitalized all field names in structs passed over RPC, and
// that the caller passes the address of the reply struct with &, not
// the struct itself.
//
func (rf *Raft) sendRequestVote(server int, args RequestVoteArgs, reply *RequestVoteReply) bool {
	ok := rf.peers[server].Call("Raft.RequestVote", args, reply)
	return ok
}

// AppendEntriesArgs structure for arguments
type AppendEntriesArgs struct {
	Term int
	ID   int
}

// AppendEntriesReply structure for arguments
type AppendEntriesReply struct {
	Term int
	ID   int
}

//  Method to send AppendEntries RPC a to server
func (rf *Raft) sendAppendEntries(server int, args AppendEntriesArgs, reply *AppendEntriesReply) bool {
	ok := rf.peers[server].Call("Raft.AppendEntries", args, reply)
	return ok
}

// AppendEntries serves as an RPC handler for AppendEntries call
func (rf *Raft) AppendEntries(args AppendEntriesArgs, reply *AppendEntriesReply) {

	// reset election timer by setting a new random timeout
	rf.appendEntriesChan <- args

}

// Start explanation
// the service using Raft (e.g. a k/v server) wants to start
// agreement on the next command to be appended to Raft's log. if this
// server isn't the leader, returns false. otherwise start the
// agreement and return immediately. there is no guarantee that this
// command will ever be committed to the Raft log, since the leader
// may fail or lose an election.
//
// the first return value is the index that the command will appear at
// if it's ever committed. the second return value is the current
// term. the third return value is true if this server believes it is
// the leader.
//
func (rf *Raft) Start(command interface{}) (int, int, bool) {
	index := -1
	term := -1
	isLeader := true

	return index, term, isLeader
}

// Kill explanation
// the tester calls Kill() when a Raft instance won't
// be needed again. you are not required to do anything
// in Kill(), but it might be convenient to (for example)
// turn off debug output from this instance.
//
func (rf *Raft) Kill() {
	// Your code here, if desired.
	rf.quitChan <- 1
}

//Leader routine
func (rf *Raft) Leader() {

	rf.mu.Lock()
	currTerm := rf.currTerm
	me := rf.me
	rf.mu.Unlock()

	fmt.Printf("IAM THE LEADER %d with term %d\n", me, currTerm)
	args := AppendEntriesArgs{currTerm, me}
	reply := AppendEntriesReply{currTerm, me}

	for i := range rf.peers {
		rf.sendAppendEntries(i, args, &reply)
	}

	timer := 0

	for {
		select {
		case <-rf.quitLeaderChan:
			return
		default:
			if timer == rf.heartbeatFrequency {
				// Send heartbeat to everyone
				timer = 0
				args := AppendEntriesArgs{currTerm, me}
				reply := AppendEntriesReply{currTerm, me}

				for i := range rf.peers {
					rf.sendAppendEntries(i, args, &reply)
				}

			}

			time.Sleep(1 * time.Millisecond)
			timer++
		}
	}

}

// Run starts the server/node in follower mode with the timeouts etc
// set,
//* Run is the MAIN Go routine for Raft
func (rf *Raft) Run() {

	// infinite loop that sleeps for timing
	for {
		select {
		case reply := <-rf.appendEntriesChan:
			// in case append entry is received, reset the timer
			fmt.Printf("%d 's term is %d", rf.me, rf.currTerm)
			fmt.Printf(" - Leader is %d\n", rf.leaderID)
			//fmt.Printf("reply term is %d\n", reply.Term)
			rf.mu.Lock()
			if reply.Term >= rf.currTerm {
				rf.heartbeatTimer = 0
				// reset votedFor and set leader info
				rf.votedFor = -1
				rf.leaderID = reply.ID
				rf.currTerm = reply.Term
				rf.isCandidate = false
			}
			rf.mu.Unlock()

		case <-rf.quitChan:
			rf.quitLeaderChan <- 1
			return

		default:
			time.Sleep(1 * time.Millisecond)
			rf.heartbeatTimer++

			if rf.heartbeatTimer >= rf.timeoutElection {
				fmt.Printf("%d Timed out\n", rf.me)

				// increment my term
				rf.mu.Lock()
				rf.currTerm++
				//timeout has occured, go into candidate mode
				rf.isCandidate = true
				// vote for myself
				rf.votedFor = rf.me
				rf.leaderID = -1
				rf.mu.Unlock()

				votes := 1
				// ask for votes
				rf.heartbeatTimer = 0
				rand.Seed(time.Now().UnixNano())
				rf.timeoutElection = rand.Intn(250+100-250+1) + 250
				won := false
				rf.mu.Lock()
				args := RequestVoteArgs{rf.currTerm, rf.me}
				rf.mu.Unlock()

				for i := range rf.peers {
					if i != rf.me {

						reply := RequestVoteReply{-1, false}
						rf.sendRequestVote(i, args, &reply)

						// if rejected check term and update the term
						rf.mu.Lock()
						if !reply.VoteGranted && reply.Term < rf.currTerm {
							rf.currTerm = reply.Term
						}
						rf.mu.Unlock()

						if reply.VoteGranted {
							votes++
							fmt.Printf("%d voted for %d - now has %d votes\n", i, rf.me, votes)
						}

						//check if I have majority of votes
						rf.mu.Lock()
						proportion := float32(float32(votes) / float32(len(rf.peers)))
						fmt.Printf("%d has proportion %f\n", rf.me, proportion)
						rf.mu.Unlock()
						if proportion > 0.5 {
							// I am the one dont weigh a ton Dont need a gun to get respect up on the street
							won = true
							break
						}
					}
				}
				rf.mu.Lock()
				rf.votedFor = -1
				rf.leaderID = -1
				rf.isCandidate = false
				rf.mu.Unlock()

				if won {
					// set state as leader and start sending heart beats
					rf.mu.Lock()
					rf.leaderID = rf.me
					rf.mu.Unlock()

					go rf.Leader()
				}

				// case where I lose, I go into a new timeout but listen for beats too

			}

		}
	}

}

// Make explanation
// the service or tester wants to create a Raft server. the ports
// of all the Raft servers (including this one) are in peers[]. this
// server's port is peers[me]. all the servers' peers[] arrays
// have the same order. persister is a place for this server to
// save its persistent state, and also initially holds the most
// recent saved state, if any. applyCh is a channel on which the
// tester or service expects Raft to send ApplyMsg messages.
// Make() must return quickly, so it should start goroutines
// for any long-running work.
//
func Make(peers []*labrpc.ClientEnd, me int,
	persister *Persister, applyCh chan ApplyMsg) *Raft {
	rf := &Raft{}
	rf.peers = peers
	rf.persister = persister
	rf.me = me

	// Your initialization code here.
	time.Sleep(1 * time.Millisecond)
	rand.Seed(time.Now().UnixNano())
	rf.currTerm = 0
	rf.heartbeatFrequency = 100
	rf.heartbeatTimer = 0
	rf.leaderID = -1
	rf.votedFor = -1
	rf.isCandidate = false
	rf.timeoutElection = rand.Intn(220+100-250+1) + 250
	rf.appendEntriesChan = make(chan AppendEntriesArgs, 1000)
	rf.requestVoteChan = make(chan RequestVoteReply, 1000)
	rf.quitChan = make(chan int, 1000)
	rf.quitLeaderChan = make(chan int, 1000)

	fmt.Printf("Starting with %d\n", rf.timeoutElection)

	go rf.Run()

	// initialize from state persisted before a crash
	rf.readPersist(persister.ReadRaftState())

	return rf
}
